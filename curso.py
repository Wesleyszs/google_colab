# -*- coding: utf-8 -*-
"""curso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuVP7BSpG0gv723znLLyaHMTzsro0yNE
"""



"""# fundamentos python"""



"""**como mostrar algo em tela?**"""

print('hello world');#comando print
'''
em python não é necessario usar ponto e virgula ao final de cada código com é ultilizado em outras linguagens , mas recomendo que use ponto e virgula pra trabalhar sua mente para prxm linguagem
comentarios #hashtag é a forma correta de comentar   e o sinal de 3 asteriscos é um comentario feito que o sistema vai ler , mais não vai afetar em nada no programa , apenas mais disco na memoria
'''

"""### <h1 > operações mátematicas <h1>"""

2 + 5 #soma

2 * 5 #multiplicação

5 / 2 #divisão exata

5 // 2 #divisão inteira

5 - 2 #subtração

5 % 2 #resto da divição

2**3 #elevado

"""###**variavel**

---
variável em uma linguagem de programação envolve atribuir um nome a um local na memória do computador, onde um valor específico pode ser armazenado e recuperado pelo programa durante sua execução.

"""

soma = 3 + 3
print(soma)

multi = 2*5
print(multi)

"""###<h1>input<h1>



---

Um "input" em programação geralmente se refere a dados fornecidos a um programa ou função. Uma definição curta e precisa seria


"""

soma = int(input('digite um numero inteiro: '));
soma2 = int(input('digite outro numero inteiro: '));

total = soma + soma2

print('o resultado da soma entre os numeros digitados é ',total  );

'''
no exercicio resolvido , foram criado 3 variaveis duas pra somar e 1 para o total  , o comando input solicita dados do usuario
e armazena nas variaveis soma e soma2 , logo apos a variavel total soma os 2 numeros digitados e o print mostra o resultado em tela
'''

"""<h1 > tipos de dados</h1>


---



1.   int  - numeros inteiro (1 , 2 , 3 , 10 , 20 , 100)
2.   float - numeros de ponto flutuante (1.5 , 3.4 , 5.8 ) numeros quebrados
3.   bool -  Representam valores verdadeiro ou falso. Exemplo: True, False.
4.   str - Sequências de caracteres, como texto. Exemplo: "Olá, mundo!"
5.   list - Coleções ordenadas de itens, que podem ser de diferentes tipos de dados. Exemplo: [1, 2, 3], ['a', 'b', 'c'], [1, 'two', 3.0].
6.   tuple - Sequências imutáveis de itens, semelhantes às listas, mas não podem ser modificadas após a criação. Exemplo: (1, 2, 3), ('a', 'b', 'c').
7.   dict- Coleções de pares chave-valor, onde cada chave única mapeia para um valor. Exemplo: {'nome': 'João', 'idade': 30, 'cidade': 'São Paulo'}.
8.   set- Coleções não ordenadas de itens únicos. Exemplo: {1, 2, 3}, {'a', 'b', 'c'}.


---
<h2>
Estes são os tipos de dados básicos em Python. Além disso, Python é uma linguagem de tipagem dinâmica, o que significa que você não precisa declarar explicitamente o tipo de uma variável; o tipo é inferido a partir do valor que você atribui a ela. Isso torna Python flexível e fácil de usar em muitos contextos diferentes.

---


<h2>

**EXERCICIOS 1**


1.   obtenha do usuario 5 numeros
2.   salve esses 5 numeros em 5 váriaveis
3.   multiplique esses 5 numeros
"""

#faça seu código aqui

"""### Resolução"""

num_1 = int(input('digite o primeiro numero inteiro:'));
num_2 = int(input('digite o segundo numero inteiro:'));
num_3 = int(input('digite o terceiro numero  inteiro:'));
num_4 = int(input('digite o quarto numero inteiro:'));
num_5 = int(input('digite o quinto numero inteiro:'));

valor = num_1 * num_2 * num_3 * num_4 * num_5 ;

print('a multiplicação dos 5 numeros é ' , valor );

"""*o exercicio pode ser resolvido como float se for digitar numeros quebrados*

###<h1> Estrutura de dados <h1>

python possui 5 estrutura de dados:

1.   Básico (str , float , int)
2.   Listas ( em  outras linguagens : Array )
3.   tuplas
4.   Dicionários( em outras linguagens )

<h2> Listas em python<h2>
"""

lista_convidados = ['wesley' , 'jorge ' , ' Kelvin' , 'jardel ' , 'guilherme', ' lucas ', ];
#é possivel criar listas vazias
novas_pessoas = []
print(lista_convidadas)

"""<h3>como adicionar um item a uma lista <h3>"""

vendedores = [];

novo_vendedor = 'jorge';

vendedores.append(novo_vendedor);
vendedores.append('kelvin' ', ' 'wesley');
vendedores.append('guilherme')

print(vendedores)

"""**.append** é a forma correta de você adicionar uma pessoa na sua lista

no exemplo acima , mostra que da pra adicionar de 2 formas

1.   .append(novo_vendedor) variavel criada para novos vendedores
2.   .append('nome do vendedor ') dessa forma voce pode adicionar sem precisar de variavel , apenas digitando o nome do vendedor

<h3>Listas com Input<h3>
"""

novo_vendedor = input('informe o nome do vendedor');
vendedores.append(novo_vendedor);

print(vendedores)

"""<h3> remover itens de uma lista <h3>"""

novos_vendedores = ['jorge', 'kelvin, wesley', 'guilherme', 'lucas'];
print(novos_vendedores);
novos_vendedores = ['jorge', 'kelvin, wesley', 'guilherme', 'lucas'];
novos_vendedores.remove('lucas');
print(novos_vendedores);

"""para remover só utilizar o **.remove ('nome')**

<h2>Como ver o tamanho da lista<h2>
"""

nfs = ('231234' , '454545' , '523512' , '400289', '228200', '858486');
quantidade_nfs =len(nfs)
print(quantidade_nfs)

"""<p>Portanto, a função **len()** é uma ferramenta útil para determinar o número de itens em uma coleção ou o comprimento de uma sequência de caracteres em Python.<p>

<h2>como obter a posição de um item na lista<h2>
"""

clientes =['casas bahia ' , 'pão de açucar', 'magalu', 'zenir' , 'americanas '];
#              0                  1               2         3            4
#             -5                  -4             -3        -2           -1
print(clientes);

primeiro_cliente = clientes[1];
print(primeiro_cliente);

cliente_procurado = 'pão de açucar';
posicao = clientes.index(cliente_procurado);
print(posicao)

"""<p>voce pode descobrir a posição de uma lista de 2 formas <p>

```
1. `primeiro_cliente = clientes[-3];`
 cliente_procurado = 'pão de açucar';
posicao = clientes.index(cliente_procurado);
print(posicao)


2. cliente_procurado = 'pão de açucar';
posicao = clientes.index(cliente_procurado);
print(posicao)
```

<h1>obter dados de dentro de uma lista<h1>
"""

carros = ['gol' , 'palio' , 'commander'  , 'hb20' , 'fiat' , 'BMW'];
# tamanho_da_lista = len(carros);
# print(tamanho_da_lista);
#jeito complicado
index_ultimo_item = tamanho_da_lista - 1
ultimo_item = carros[index_ultimo_item];
print(ultimo_item);

#jeito simples

ultimo_item_simples = carros[-1]
print(ultimo_item_simples);

#obter sublista a partir de lista

tres_ultimos_Carros =carros[4 :]; #dois pontos na frente é os 3 primeiros da lista , dois pontos atras do 3: é os 3 ultimos
print(tres_ultimos_Carros);

"""**EXERCICIO 2**

1.   Crie uma lista de vendedores
2.   gerar um input que permita o usuario informa o vendedor que ele quer pesquisar
3. retorne para o usuario a posição do vendedor na lista


"""

#resolva aqui

"""###**RESOLUÇÃO**"""

vendedores=[' ', 'wesley' , 'jorge', 'kelvin', 'jardel', 'guilherme']; #Crie uma lista de vendedores
vendedor_a_procurar = str(input('digite o nome do vendedor que você prefere '));#gerar um input que permita o usuario informa o vendedor que ele quer pesquisar

posicao = vendedores.index(vendedor_a_procurar);#retorne para o usuario a posição do vendedor na lista
msg_resposta = 'posição atual do vendedor ' + vendedor_a_procurar + ' é ' + str(posicao)



print(msg_resposta);

"""###<h1>tuplas<h1>"""

numeros = (1 , 2 , 3, 4 , 5 , 6 ,7 ,8 ,9);
# numero.remove(2);
print(numeros);

"""<p>diferente de listas , as tuplas não podem ser removidas com uma função

caso você precise remover , tem que ir no codigo e alterar </p>

###<h1>Dicionários</h1>

---

dicionario em python é uma estrutura de dados que mapeia chaves a valores ,
permitindo o acesso rápido aos valores atraves das chaves.

<h2>objetos
"""

nfs = {'numero_nf':'31012000',
       'data_emissao':'20/02/2022'
};

nfs_2 = {
  'numero_nf':'40028922' ,
  'data_emissao':'30/05/2023'
}

notas_fiscais = [nfs , nfs_2];

print(notas_fiscais);

"""<p> da pra colocar uma lista dentro de um dicionario , como mostra no exemplo acima<p>

<h2>adicionando dicionarios a listas
"""

nfs = [
    {
        'numero_nf':'31012000',
       'data_emissao':'20/02/2022',
       'emissor':'empresa alfa'
    },

    {
  'numero_nf':'40028922' ,
  'data_emissao':'30/05/2023',
  'empresa':'beta'
}
]
nfs.append(
    {
  'numero_nf':'40028922' ,
  'data_emissao':'28/05/2023',
  'empresa':'gama'
    }
)

print(nfs)

"""**exercicio**

1.   criar um input que permita ao usuario incerir um novo funcionario em uma lista
2.  o novo funcionario terá 'nome', 'idade', 'profissão'
3. mostre a lista atualizada em tela


"""

veteranos = {
    'kelvin': [ 'idade 25', 'marketing'],
    'wesley': ['idade 24', 'desenvolvedor de software']
}
print(veteranos)

nome = str(input('digite o nome do funcionario novato '))
idade = int(input('digite a idade do funcionario novato '))
profissao = str(input('digite a profissão do funcionario novato '))

novo_funcionario = [ idade , profissao]
veteranos[nome] = novo_funcionario


print(veteranos)

print(veteranos)

import math

numero = 15;
raiz_quad = math.sqrt(numero);
print(raiz_quad);

"""<h1> condicionais

---


<p> condicionais são formas que temos de modificar o fluxo do código
"""

nota1 = float(input('qual a primeira nota do aluno : '));
nota2 = float(input('qual a segunda nota do aluno : '));

media = (nota1 + nota2)/2;

if media >= 6: # se a média for maior (>) ou igual(=) a o 6 então
    print('o aluno esta aprovado ', media ); #<----- me retorne isso
else :  #se não
    print(' o aluno esta reprovado' , media ); #<-------- me retorne isso

"""if condição1:
    # Bloco de código a ser executado se a condição1 for verdadeira
elif condição2:
    # Bloco de código a ser executado se a condição2 for verdadeira
else:
    # Bloco de código a ser executado se nenhuma das condições anteriores for verdadeira

###<H2>EXERCICIO

---
1. criar uma lista de nomes
2. criar um input para o usuario se o nome esta na lista ou não
3. responde se esta ou não na lista
"""

nomes = ['wesley', 'kelvin', 'jorge' , 'jardel' , 'guilherme'];

pesquisa = str(input('qual a pessoa que você procura '));

if pesquisa in nomes: #se a pesquisa digitada existe na lista nomes entao me retorne
    print('o funcionario %s esta na lista '% pesquisa); #esse print
else: #se não estiver na lista me retorne
    print('o funcionario %s não esta na lista ' % pesquisa); #esse print

"""<H2>VERIFICANDO SE O VALOR EXISTE EM LISTA"""

from logging import exception
nomes = ['wesley', 'kelvin', 'jorge' , 'jardel' , 'guilherme'];
nome_pesquisado = input('me informe o nome e te informatrei se existe ou nao na lista ');
try:
  index_nome = nomes.index(nome_pesquisado);
  print('o nome existe');
except Exception:
  print('deu erro , provavelmente pq o nome nao existe ');

"""<font color='pink'> **try**:</font>


- O bloco try é usado para envolver o código que pode gerar exceções.
- Quando o interpretador Python encontra um bloco try, ele tenta executar o código dentro dele.
- Se uma exceção ocorrer durante a execução do código dentro do bloco try, o controle do programa é transferido para o bloco except.


---

<font color='pink'> **except**:</font>
- O bloco except é usado para lidar com exceções específicas que podem ocorrer dentro do bloco try.
- Você pode ter vários blocos except para lidar com diferentes tipos de exceções.
- Se uma exceção ocorrer dentro do bloco try, o interpretador Python procura um bloco except correspondente. Se encontrar um, executa o código dentro desse bloco.
- Se não houver um bloco except correspondente para a exceção que ocorreu, o programa será encerrado e uma mensagem de erro será exibida.

<h1> multiplas condições<h1>
"""

nfs = ('231234' , '454545' , '523512' , '400289', '228200', '858486');

posicao = nfs.index( '231234');

if posicao ==0:
  print('a posição é a primeira ');
elif posicao ==1:
  print('a posição é a segunda ');
elif posicao ==2:
  print('a posição é a terceira ');
elif posicao ==3:
  print('a posição é a quarta ');
elif posicao ==4:
  print('a posição é a quinta ');
elif posicao ==5:
  print('a posição é a sexta ');
else:
  print("nada deu certo ");

idade = int(input('Digite a sua idade: '));

if idade <= 10:
  print('Você é uma criança');
elif idade <= 18:
  print('Você é um adolescente / jovem');
elif idade < 60:
  print('Você é um jovem adulto / adulto');
else:
  print('Você é idoso');

"""###<font color= '#BC425D'>**LOOPS**<font>

---

<p>Em programação, um loop é uma estrutura que permite executar repetidamente um bloco de código várias vezes. Os loops são fundamentais para a automação de tarefas repetitivas e para iterar sobre coleções de dados.

<h2><font color= '1CC3E2'>while<font>
"""

numero = 1 ; #numero tem o valor 1

while numero<=5: #enquanto numero for menor ou igual a 5 o loop vai rodar

  print('o numero de entrada  é %d' % numero)
  numero = numero + 1 #numero = numero +1 =2 numero + 2 = 3 (3 <= 5 true) ; numero + 3 = 4 (4 <=5 true ) ; numero + 4 = 5 (5 <= 5 true ) ; numero + 5 = 6 (6 <= 5 false) fim loop

  print('o numero de saida é %d : ' % numero);
  print('==================X================');
print('o numero final é %d' %numero)

qtd_vezes = 1
while qtd_vezes < 100:
    calculo = qtd_vezes / 100 * qtd_vezes
    print(calculo)
    qtd_vezes = qtd_vezes+1

"""<h2><font color= '1CC3E2'>for<font>

---
 <p> Em Python, o for é uma estrutura de controle utilizada para iterar sobre elementos de uma sequência, como listas, tuplas, strings, dicionários, conjuntos, entre outros tipos de dados iteráveis. O for é frequentemente utilizado quando você precisa executar um bloco de código repetidamente para cada item na sequência.

"""

convidados = [
    'wesley',
    'jorge',
    'kelvin',
    'jardel',
    'guilherme'

]

for i in convidados:
  print(i);

for i in range(100): #contagem de 0 a 9
  print(i)

numeros = [1 , 2 , 3, 4 ,5 ,6 ,7 ,8 ,9 , 10]

for i in numeros:
  print(i * 2 ) #o dobro dos numeros da lista

import random


numeros_aleatorios = [random.randint(1, 100) for _ in range(10)]

print("Números aleatórios:", numeros_aleatorios)

lista1 = []
numero = 1
while numero <= 10:
      lista1.append(numero)
      numero = numero + 1
      print(lista1)

print(lista_grande)

"""###<H1>FUNÇÕES

---

<p>Funções em Python são blocos de código reutilizáveis que realizam uma tarefa específica. Elas ajudam a organizar o código, tornando-o mais legível e modular. As funções podem aceitar zero ou mais argumentos como entrada e podem retornar um valor de saída. Elas são definidas usando a palavra-chave def, seguida pelo nome da função e, opcionalmente, uma lista de parâmetros entre parênteses. O corpo da função é indentado e contém as instruções que serão executadas quando a função é chamada. Para chamar uma função, você simplesmente usa seu nome seguido pelos argumentos necessários entre parênteses. As funções também podem ter valores de retorno, especificados usando a palavra-chave return, que envia de volta um resultado para o local onde a função foi chamada.
"""

def soma():
  valor1 = 10
  valor2 = 10

  resultado = valor1 + valor2
  print(resultado)

soma()

def soma1(valor1, valor2):
    resultado = valor1 + valor2
    return resultado

def dividir(numerador , denominador):
    resultado = numerador / denominador
    return resultado

resultado_da_soma = soma1(10.1, 10.5)
print(resultado_da_soma)

resultado_Da_divisao =dividir(10 , 2)
print(resultado_Da_divisao)

dividir(3 , 4)

"""1. faça uma função de ; soma , divisao , multiplicação , divisao"""

def soma(soma1 , soma2):
  res_soma = soma1 + soma2
  return res_soma

def dividir(numerador , denominador):
    resultado = numerador / denominador
    return resultado

def multi(num1 , num2):
  res_multi = num1 * num2 ;
  return res_multi;

def menos(menos1 , menos2):
    res_menos = menos1 - menos2;
    return res_menos;


res_soma = soma(10, 5)
resultado = dividir(10, 2)
res_multi = multi(5, 4)
res_menos = menos(10, 3)

print(res_soma , resultado  , res_multi , res_menos)

menos(2 , 5)

def qtd_lista(lista):
    qtd = len(lista)
    return qtd

def verificacao(numero1, numero2):
    return numero1 <= numero2  # Corrigindo a lógica para verificar se número1 é menor ou igual a número2

def remover_da_lista(lista, qtd_remover):
    print("Removendo", qtd_remover, "convidados da lista...")
    for _ in range(qtd_remover):
        if lista:  # Verifica se há elementos na lista antes de tentar remover
            del lista[0]  # Remove o primeiro elemento da lista

convidados = [
    'wesley',
    'kelvin',
    'jorge',
    'guilherme',
    'jardel',
    'nayara',
    'joyce',
    'vivian',
    'natalia',
    'mariana',
]

quantidade = qtd_lista(convidados)
print("Quantidade de convidados:", quantidade)

capacidade_salao = 9
capacidade_respeitada = verificacao(quantidade, capacidade_salao)
print("Capacidade do salão respeitada:", capacidade_respeitada)

if not capacidade_respeitada:
    qtd_remover = capacidade_salao - quantidade  # Calcula a quantidade de convidados que precisam ser removidos
    print('A quantidade a ser removida é', qtd_remover)
    remover_da_lista(convidados, qtd_remover)
    print("Lista de convidados após remoção:", convidados)
else:
    print("A capacidade do salão não foi excedida. Nenhum convidado será removido.")